// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bhinnekaner.proto

/*
Package bhinnekaner is a generated protocol buffer package.

It is generated from these files:
	bhinnekaner.proto

It has these top-level messages:
	BhinnekanerQuery
	BhinnekanerRequest
	BhinnekanerResponse
	Bhinnekaners
*/
package bhinnekaner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BhinnekanerQuery struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *BhinnekanerQuery) Reset()                    { *m = BhinnekanerQuery{} }
func (m *BhinnekanerQuery) String() string            { return proto.CompactTextString(m) }
func (*BhinnekanerQuery) ProtoMessage()               {}
func (*BhinnekanerQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BhinnekanerQuery) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type BhinnekanerRequest struct {
	ID    string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
}

func (m *BhinnekanerRequest) Reset()                    { *m = BhinnekanerRequest{} }
func (m *BhinnekanerRequest) String() string            { return proto.CompactTextString(m) }
func (*BhinnekanerRequest) ProtoMessage()               {}
func (*BhinnekanerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BhinnekanerRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *BhinnekanerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BhinnekanerRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type BhinnekanerResponse struct {
	ID    string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
}

func (m *BhinnekanerResponse) Reset()                    { *m = BhinnekanerResponse{} }
func (m *BhinnekanerResponse) String() string            { return proto.CompactTextString(m) }
func (*BhinnekanerResponse) ProtoMessage()               {}
func (*BhinnekanerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BhinnekanerResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *BhinnekanerResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BhinnekanerResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Bhinnekaners struct {
	BhinnekanerResponses []*BhinnekanerResponse `protobuf:"bytes,1,rep,name=BhinnekanerResponses" json:"BhinnekanerResponses,omitempty"`
}

func (m *Bhinnekaners) Reset()                    { *m = Bhinnekaners{} }
func (m *Bhinnekaners) String() string            { return proto.CompactTextString(m) }
func (*Bhinnekaners) ProtoMessage()               {}
func (*Bhinnekaners) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Bhinnekaners) GetBhinnekanerResponses() []*BhinnekanerResponse {
	if m != nil {
		return m.BhinnekanerResponses
	}
	return nil
}

func init() {
	proto.RegisterType((*BhinnekanerQuery)(nil), "bhinnekaner.BhinnekanerQuery")
	proto.RegisterType((*BhinnekanerRequest)(nil), "bhinnekaner.BhinnekanerRequest")
	proto.RegisterType((*BhinnekanerResponse)(nil), "bhinnekaner.BhinnekanerResponse")
	proto.RegisterType((*Bhinnekaners)(nil), "bhinnekaner.Bhinnekaners")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BhinnekanerService service

type BhinnekanerServiceClient interface {
	Add(ctx context.Context, in *BhinnekanerRequest, opts ...grpc.CallOption) (*BhinnekanerResponse, error)
	FindByID(ctx context.Context, in *BhinnekanerQuery, opts ...grpc.CallOption) (BhinnekanerService_FindByIDClient, error)
	FindAll(ctx context.Context, in *BhinnekanerQuery, opts ...grpc.CallOption) (BhinnekanerService_FindAllClient, error)
}

type bhinnekanerServiceClient struct {
	cc *grpc.ClientConn
}

func NewBhinnekanerServiceClient(cc *grpc.ClientConn) BhinnekanerServiceClient {
	return &bhinnekanerServiceClient{cc}
}

func (c *bhinnekanerServiceClient) Add(ctx context.Context, in *BhinnekanerRequest, opts ...grpc.CallOption) (*BhinnekanerResponse, error) {
	out := new(BhinnekanerResponse)
	err := grpc.Invoke(ctx, "/bhinnekaner.BhinnekanerService/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bhinnekanerServiceClient) FindByID(ctx context.Context, in *BhinnekanerQuery, opts ...grpc.CallOption) (BhinnekanerService_FindByIDClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BhinnekanerService_serviceDesc.Streams[0], c.cc, "/bhinnekaner.BhinnekanerService/FindByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &bhinnekanerServiceFindByIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BhinnekanerService_FindByIDClient interface {
	Recv() (*BhinnekanerResponse, error)
	grpc.ClientStream
}

type bhinnekanerServiceFindByIDClient struct {
	grpc.ClientStream
}

func (x *bhinnekanerServiceFindByIDClient) Recv() (*BhinnekanerResponse, error) {
	m := new(BhinnekanerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bhinnekanerServiceClient) FindAll(ctx context.Context, in *BhinnekanerQuery, opts ...grpc.CallOption) (BhinnekanerService_FindAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BhinnekanerService_serviceDesc.Streams[1], c.cc, "/bhinnekaner.BhinnekanerService/FindAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &bhinnekanerServiceFindAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BhinnekanerService_FindAllClient interface {
	Recv() (*BhinnekanerResponse, error)
	grpc.ClientStream
}

type bhinnekanerServiceFindAllClient struct {
	grpc.ClientStream
}

func (x *bhinnekanerServiceFindAllClient) Recv() (*BhinnekanerResponse, error) {
	m := new(BhinnekanerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BhinnekanerService service

type BhinnekanerServiceServer interface {
	Add(context.Context, *BhinnekanerRequest) (*BhinnekanerResponse, error)
	FindByID(*BhinnekanerQuery, BhinnekanerService_FindByIDServer) error
	FindAll(*BhinnekanerQuery, BhinnekanerService_FindAllServer) error
}

func RegisterBhinnekanerServiceServer(s *grpc.Server, srv BhinnekanerServiceServer) {
	s.RegisterService(&_BhinnekanerService_serviceDesc, srv)
}

func _BhinnekanerService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BhinnekanerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BhinnekanerServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bhinnekaner.BhinnekanerService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BhinnekanerServiceServer).Add(ctx, req.(*BhinnekanerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BhinnekanerService_FindByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BhinnekanerQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BhinnekanerServiceServer).FindByID(m, &bhinnekanerServiceFindByIDServer{stream})
}

type BhinnekanerService_FindByIDServer interface {
	Send(*BhinnekanerResponse) error
	grpc.ServerStream
}

type bhinnekanerServiceFindByIDServer struct {
	grpc.ServerStream
}

func (x *bhinnekanerServiceFindByIDServer) Send(m *BhinnekanerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BhinnekanerService_FindAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BhinnekanerQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BhinnekanerServiceServer).FindAll(m, &bhinnekanerServiceFindAllServer{stream})
}

type BhinnekanerService_FindAllServer interface {
	Send(*BhinnekanerResponse) error
	grpc.ServerStream
}

type bhinnekanerServiceFindAllServer struct {
	grpc.ServerStream
}

func (x *bhinnekanerServiceFindAllServer) Send(m *BhinnekanerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _BhinnekanerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bhinnekaner.BhinnekanerService",
	HandlerType: (*BhinnekanerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BhinnekanerService_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindByID",
			Handler:       _BhinnekanerService_FindByID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindAll",
			Handler:       _BhinnekanerService_FindAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bhinnekaner.proto",
}

func init() { proto.RegisterFile("bhinnekaner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xca, 0xc8, 0xcc,
	0xcb, 0x4b, 0xcd, 0x4e, 0xcc, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x52, 0xe2, 0x12, 0x70, 0x42, 0x70, 0x03, 0x4b, 0x53, 0x8b, 0x2a, 0x85, 0xf8, 0xb8,
	0x98, 0x3c, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x3c, 0x5d, 0x94, 0xfc, 0xb8,
	0x84, 0x90, 0xd4, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0xa0, 0xab, 0x12, 0x12, 0xe2, 0x62,
	0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x02, 0x8b, 0x80, 0xd9, 0x42, 0x22, 0x5c, 0xac, 0xae, 0xb9,
	0x89, 0x99, 0x39, 0x12, 0xcc, 0x60, 0x41, 0x08, 0x47, 0xc9, 0x9f, 0x4b, 0x18, 0xc5, 0xbc, 0xe2,
	0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x0a, 0x0c, 0x4c, 0xe1, 0xe2, 0x41, 0x32, 0xb0, 0x58, 0x28, 0x84,
	0x4b, 0x04, 0x8b, 0x05, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x0a, 0x7a, 0xc8, 0x61,
	0x82, 0x45, 0x61, 0x10, 0x56, 0xdd, 0x46, 0xbf, 0x19, 0x51, 0xc2, 0x21, 0x38, 0xb5, 0xa8, 0x2c,
	0x33, 0x39, 0x55, 0xc8, 0x83, 0x8b, 0xd9, 0x31, 0x25, 0x45, 0x48, 0x1e, 0xb7, 0xa9, 0xe0, 0xf0,
	0x92, 0x22, 0x68, 0xad, 0x90, 0x2f, 0x17, 0x87, 0x5b, 0x66, 0x5e, 0x8a, 0x53, 0xa5, 0xa7, 0x8b,
	0x90, 0x2c, 0x2e, 0xd5, 0xe0, 0x28, 0x22, 0x6c, 0x98, 0x01, 0xa3, 0x90, 0x0f, 0x17, 0x3b, 0xc8,
	0x38, 0xc7, 0x9c, 0x1c, 0x2a, 0x98, 0x96, 0xc4, 0x06, 0x4e, 0x3c, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xab, 0xb5, 0x74, 0x3e, 0x51, 0x02, 0x00, 0x00,
}
